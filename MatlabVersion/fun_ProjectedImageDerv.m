function [projected_derv] = fun_ProjectedImageDerv(depth_mat, ...
    img_mat, ...
    pro_color, ...
    pro_sigma, ...
    EpiLine, ...
    ParaSet)
%Calculate P'

    % parameters set
    [pro_v_range, pro_u_range] = size(depth_mat);
    [cam_y_range, cam_x_range] = size(img_mat);
    depth_vec = reshape(depth_mat', pro_v_range*pro_u_range, 1);
    projected_derv = zeros(cam_y_range*cam_x_range, cam_y_range*cam_x_range);

    for l = 1:cam_y_range * cam_x_range
        for k = 1:pro_v_range * pro_u_range
            h_pro = ParaSet.coord_pro(k,1);
            w_pro = ParaSet.coord_pro(k,2);
            A = EpiLine.lineA(h_pro, w_pro);
            B = EpiLine.lineB(h_pro, w_pro);
            
            projected_x = (ParaSet.M(k,1) * depth_vec(k) + ParaSet.D(k,1)) ...
                / (ParaSet.M(k,3) * depth_vec(k) + ParaSet.D(k,3));
            projected_y = - A/B * projected_x + 1/B;
%             projected_y = (ParaSet.M(k,2) * depth_vec(k) + ParaSet.D(k,2)) ...
%                 / (ParaSet.M(k,3) * depth_vec(k) + ParaSet.D(k,3));
            tmp_exp_val = (-0.5 * 1 / pro_sigma(k,1)^2) ...
                * ((ParaSet.coord_cam(l,2) - projected_x)^2 ...
                + (ParaSet.coord_cam(l,1) - projected_y)^2);

            tmp_mul_val = (1 / pro_sigma(k, 1)^2) ...
                * (1 / (ParaSet.M(k,3)*depth_vec(k) + ParaSet.D(k,3))^2) ...
                * ((ParaSet.coord_cam(l,2) - projected_x) ...
                * (ParaSet.M(k,1)*ParaSet.D(k,3) - ParaSet.M(k,3)*ParaSet.D(k,1)) ...
                + (ParaSet.coord_cam(l,1) - projected_y) ...
                * (ParaSet.M(k,2)*ParaSet.D(k,3) - ParaSet.M(k,3)*ParaSet.D(k,2)));
            
            tmp_val = pro_color(k, 1) * (0.5 * pro_sigma(k,1)^2) ...
                * exp(tmp_exp_val) * tmp_mul_val;
            projected_derv(l,k) = tmp_val;
        end
    end

end
